Code for custom pagination for collection page & push down last Soldout product. 

<section>
  {% paginate collection.products by 1000  %}
    <div class="sortbydiv collection-products">
    <div id="products-container" class="collection-products products-per-row-{{ section.settings.products_in_rows }}">
  {% assign in_stock_products = collection.products | where: 'available'%}
  {% assign out_of_stock_products = collection.products | where: 'available', false %}
  {% assign SortedProducts = in_stock_products | concat: out_of_stock_products %}
      
      {% for product in SortedProducts %}
           
        {% include 'product-list-item' %}
           
      {% else %}
        <p class="empty">{{ 'collections.collection.no_products' | t }}</p>
             
      {% endfor %}
    </div>


<div id="pagination-container" class="page-width">
  <button id="prev-button">Previous</button>
  <span id="page-indicator"></span>
  <button id="next-button">Next</button>
</div>

  {% endpaginate %}
</section>




<script>
document.addEventListener("DOMContentLoaded", function() {
  const productsPerPage = 10; // Set the number of products per page
  const productsContainer = document.getElementById('products-container');
  const products = Array.from(productsContainer.getElementsByClassName('product-item'));
  const paginationContainer = document.getElementById('pagination-container');
  const prevButton = document.getElementById('prev-button');
  const nextButton = document.getElementById('next-button');
  const pageIndicator = document.getElementById('page-indicator');

  let currentPage = 1;
  const totalPages = Math.ceil(products.length / productsPerPage);

  function renderProducts() {
    // Hide all products
    products.forEach(product => product.style.display = 'none');

    // Calculate the start and end index for products on the current page
    const startIndex = (currentPage - 1) * productsPerPage;
    const endIndex = Math.min(startIndex + productsPerPage, products.length);

    // Show products for the current page
    for (let i = startIndex; i < endIndex; i++) {
      products[i].style.display = 'inline-block';
    }

    // Update pagination
    renderPagination();
  }

  function renderPagination() {
    // Update page indicator
    pageIndicator.innerText = `${currentPage} / ${totalPages}`;

    // Enable or disable prev and next buttons
    prevButton.disabled = currentPage === 1;
    nextButton.disabled = currentPage === totalPages;
  }

  prevButton.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      renderProducts();
    }
  });

  nextButton.addEventListener('click', () => {
    if (currentPage < totalPages) {
      currentPage++;
      renderProducts();
    }
  });

  // Check for existing page query parameter
  const urlParams = new URLSearchParams(window.location.search);
  const pageParam = parseInt(urlParams.get('page'));
  if (pageParam && pageParam > 0 && pageParam <= totalPages) {
    currentPage = pageParam;
  }

  // Initial render
  renderProducts();

  // Handle back/forward navigation
  window.onpopstate = function(event) {
    if (event.state && event.state.page) {
      currentPage = event.state.page;
      renderProducts();
    }
  };
});

  
</script>